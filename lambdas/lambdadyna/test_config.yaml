# Test configuration for lambdadyna
name: lambdadyna
description: "Stores user actions in DynamoDB and sends notifications through SNS"

# Variables de entorno requeridas
env_vars:
  DYNAMODB_TABLE: "UserActionsTable"
  SNS_TOPIC_ARN: "arn:aws:sns:us-east-1:000000000000:UserNotifications"
  AWS_ACCESS_KEY_ID: "test"  # pragma: allowlist secret
  AWS_SECRET_ACCESS_KEY: "test"  # pragma: allowlist secret
  AWS_DEFAULT_REGION: "us-east-1"

# Servicios AWS necesarios
aws_services:
  - service: dynamodb
    resources:
      - type: table
        name: "UserActionsTable"
        key_schema:
          - AttributeName: "UserId"
            KeyType: "HASH"
        attribute_definitions:
          - AttributeName: "UserId"
            AttributeType: "S"
        billing_mode: PAY_PER_REQUEST

  - service: sns
    resources:
      - type: topic
        name: "UserNotifications"

# No se requieren mocks HTTP (la función usa solo servicios AWS)
http_mocks: []

# Evento de prueba (simula invocación desde API Gateway)
test_event:
  body: |
    {
      "userId": "user-001",
      "email": "user001@example.com",
      "action": "login"
    }

# Validaciones de respuesta esperada
expected_response:
  statusCode: 200
  body_contains:
    - "user-001"
    - "login"

# Post-execution checks simplificados (sin DynamoDB/SNS custom checks por ahora)
post_execution_checks: []
  # TODO: Agregar soporte para DynamoDB queries y SNS message verification
  # en validate_post_execution() si es necesario
